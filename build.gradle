buildscript {
    repositories {
        maven { setUrl("file://${project.rootDir}/repositories") }
        maven { url "https://bmclapi2.bangbang93.com/maven" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io/' }
        //new forge repository
        //maven { url "https://maven.minecraftforge.net" }
        maven { url 'https://repo.spongepowered.org/maven'}
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-20211118.174922-42"
        classpath 'org.spongepowered:mixingradle:0.6-20171001.194726-1'
    }
}

plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'org.spongepowered.mixin'


eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = false
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = false
    }
}

version = "1.8.9"
group = "com128.kzf"
archivesBaseName = "CompatLib" //name of the output jar

sourceCompatibility = targetCompatibility = 1.8 //using java 8
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22" //mappings for 1.8.9
    makeObfSourceJar = false //disable creation of sources jar
    clientJvmArgs += ["-Dfml.coreMods.load=space.libs.core.CompatLibCore"]
}

configurations {
    shade
    compile.extendsFrom(shade)
}

repositories {
    maven { url 'https://jitpack.io/' }
    maven { url 'https://repo.spongepowered.org/maven/' }
    maven {
        url 'https://maven.cleanroommc.com'
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        url "https://maven.covers1624.net"
    }
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

task LiteLoader {
    def jarUrl = new URL('https://jenkins.liteloader.com/view/1.8.9/job/LiteLoader%201.8.9/lastSuccessfulBuild/artifact/build/libs/liteloader-1.8.9-SNAPSHOT.jar')
    def jarFile = new File('libs/liteloader-1.8.9-SNAPSHOT.jar')
    try {
        jarUrl.withInputStream { inputStream ->
            jarFile.withOutputStream { outputStream ->
                inputStream.eachByte(1024) { buffer, bytesRead ->
                    outputStream.write(buffer, 0, bytesRead)
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
}

dependencies {
    //shade will bundle your library to the output jar
    //example:
    /*shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }*/
    //compile will make your library available only in this dev environment
    compileOnly("curse.maven:mo-bends-231347:2272295")
    compileOnly("curse.maven:more-player-models-221939:2284120")
    compileOnly("curse.maven:alexiillib-229301:2233177")
    compileOnly("curse.maven:civcraft-228061:2233156")
    compileOnly("curse.maven:gog-skybox-266068:2411441")
    compileOnly("curse.maven:thaumcraft-223628:2287496")
    compileOnly("codechicken:NotEnoughItems:1.8-1.0.5.104:dev")
    compileOnly("codechicken:CodeChickenLib:1.8-1.1.2.139:dev")
    compileOnly("com.mumfrey:liteloader:1.8.9-SNAPSHOT")
    compileOnly("net.md-5:SpecialSource:1.7.4") {
        exclude module: 'asm-debug-all'
        exclude module: 'guava'
        exclude module: 'jopt-simple'
        exclude module: 'lombok'
        exclude module: 'opencsv'
    }
    shade('net.jodah:typetools:0.6.3')
    implementation 'zone.rong:mixinbooter:9.4'
    //compile "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    //compile shade('com.electronwill.night-config:core:3.6.3')
    //compile shade('com.electronwill.night-config:toml:3.6.3')
}

processResources {
    //this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    //replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        //replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    //copy everything else, that"s not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

shadowJar {
    dependencies {
        //we remove gson because it belongs to the public api and will break shading
        //exclude(dependency("com.google.code.gson:gson:2.8.6"))
    }
    configurations = [project.configurations.shade]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE //prevent duplicates
    classifier "" //prevent creation of unshadowed jar
}

jar {
    manifest {
        attributes([
            "FMLAT": "compatlib_at.cfg",
            "FMLCorePlugin": "space.libs.core.CompatLibCore",
            "FMLCorePluginContainsFMLMod": "true",
            "ForceLoadAsMod": "true",
            //"TweakClass": "space.libs.core.CompatLibTweaker",
            //"TweakOrder": "-1000",
            "MixinConfigs": "mixins.compatlib.json",
            "Manifest-Version": 1.0
        ])
    }
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.compatlib.refmap.json"
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}
tasks.reobfShadowJar.mustRunAfter shadowJar

sourceSets {
    dummy {
        compileClasspath += main.compileClasspath
    }
    main {
        ext.refMap = "mixins.compatlib.refmap.json"
        compileClasspath += dummy.output
    }
}
